import 'dart:io';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:video_player/video_player.dart';
import 'package:open_file/open_file.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Download Image to Hidden Folder',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const ImagePage(),
    );
  }
}

class ImagePage extends StatelessWidget {
  const ImagePage({super.key});

  static const String imageUrl =
      'https://svs.gsfc.nasa.gov/vis/a030000/a030800/a030877/frames/5760x3240_16x9_01p/BlackMarble_2016_928m_europe_labeled.png';

  static final GlobalKey<CommonImageWidgetState> _imageWidgetKey =
  GlobalKey<CommonImageWidgetState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Download to Hidden Folder'),
      ),
      body: Center(
        child: CommonImageWidget(
          key: _imageWidgetKey,
          imageUrl: imageUrl,
          downloadStatus: (status, value) {

          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _imageWidgetKey.currentState?.checkForDownloadedImage(downloading: true);
        },
        child: const Icon(Icons.download),
      ),
    );
  }
}

class VideoPage extends StatelessWidget {

  static const String videoUrl =
      'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4';

  const VideoPage({super.key});

  static final GlobalKey<CommonVideoWidgetState> _videoWidgetKey =
  GlobalKey<CommonVideoWidgetState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Download & Play Video'),
      ),
      body: Center(
        child: CommonVideoWidget(
          key: _videoWidgetKey,
          videoUrl: videoUrl,
          videoDownloading: (status) {
            if (status) {
              print('Downloading video...');
            } else {
              print('Download complete or failed');
            }
          },
          downloadStatus: (status, value) {
            print("Download status: $status, Message: $value");
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // To trigger the download explicitly, call the function in `CommonVideoWidgetState`
          // For example, you could create a method in `CommonVideoWidget` that initiates the download
          print('Floating button pressed for video download');
        },
        child: const Icon(Icons.download),
      ),
    );
  }
}

class FilePage extends StatelessWidget {
  static const String fileUrl =
      'https://pdfobject.com/pdf/sample.pdf';

  static const String fileType = 'PDF';

  const FilePage({super.key});

  static final GlobalKey<CommonFileWidgetState> _fileWidgetKey =
  GlobalKey<CommonFileWidgetState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Download & Open File'),
      ),
      body: Center(
        child: CommonFileWidget(
          key: _fileWidgetKey,
          fileUrl: fileUrl,
          fileType: fileType,
          fileDownloading: (status) {
            if (status) {
              print('Downloading file...');
            } else {
              print('Download complete or failed');
            }
          },
          downloadStatus: (status, value) {
            print("Download status: $status, Message: $value");
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Trigger download or any other functionality.
          print('Floating button pressed for file download');
        },
        child: const Icon(Icons.download),
      ),
    );
  }
}

class CommonImageWidget extends StatefulWidget {
  final String imageUrl;
  final double? width;
  final double? height;
  final ValueChanged<bool>? imageDownloading;
  final void Function(bool status, String value)? downloadStatus;
  final ImageLoadingBuilder? loadingBuilder;
  final ImageErrorWidgetBuilder? errorBuilder;

  const CommonImageWidget({
    super.key,
    this.width,
    this.height,
    this.errorBuilder,
    this.downloadStatus,
    this.loadingBuilder,
    this.imageDownloading,
    required this.imageUrl,
  });

  @override
  State<CommonImageWidget> createState() => CommonImageWidgetState();
}

class CommonImageWidgetState extends State<CommonImageWidget> {
  File? downloadedImage;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      checkForDownloadedImage();
    });
  }

  @override
  Widget build(BuildContext context) {
    if (downloadedImage != null) {
      return Image.file(
        downloadedImage!,
        width: widget.width,
        height: widget.height,
        errorBuilder: widget.errorBuilder ??
                (context, error, stackTrace) {
              return const Center(
                child: Text('Failed to load image'),
              );
            },
      );
    } else {
      return Image.network(
        widget.imageUrl,
        width: widget.width,
        height: widget.height,
        loadingBuilder: widget.loadingBuilder ??
                (context, child, loadingProgress) {
              if (loadingProgress == null) {
                return child;
              }
              return Center(
                child: CircularProgressIndicator(
                  value: loadingProgress.expectedTotalBytes != null
                      ? loadingProgress.cumulativeBytesLoaded /
                      (loadingProgress.expectedTotalBytes ?? 1)
                      : null,
                ),
              );
            },
        errorBuilder: widget.errorBuilder ??
                (context, error, stackTrace) {
              return const Center(
                child: Text('Failed to load image'),
              );
            },
      );
    }
  }

  Future<Directory?> getHiddenDirectory() async {
    Directory? hiddenDir;
    if (Platform.isAndroid) {
      hiddenDir = await getExternalStorageDirectory();
      String hiddenPath = '${hiddenDir?.path ?? ""}/.hiddenImages';
      hiddenDir = Directory(hiddenPath);
    } else if (Platform.isIOS) {
      hiddenDir = await getApplicationDocumentsDirectory();
    }

    if (hiddenDir != null && !(await hiddenDir.exists())) {
      await hiddenDir.create(recursive: true);
    }
    return hiddenDir;
  }

  Future<void> checkForDownloadedImage({bool downloading=false}) async {
    Directory? hiddenDir = await getHiddenDirectory();
    if (hiddenDir != null) {
      String fileName = widget.imageUrl.split('/').last;
      String filePath = '${hiddenDir.path}/$fileName';
      if (await File(filePath).exists()) {
        setState(() {
          downloadedImage = File(filePath);
          setStatus(status: true, value: 'Image already downloaded');
        });
      }else{
        if(downloading){
          downloadImageToHiddenFolder();
        }
      }
    }
  }

  Future<void> downloadImageToHiddenFolder() async {
    updateLoading(true);
    try {
      if (Platform.isAndroid) {
        PermissionStatus permission = await Permission.storage.request();
        if (!permission.isGranted) {
          setState(() {
            setStatus(status: false, value: 'Storage permission not granted');
            updateLoading(false);
          });
          return;
        }
      }
      Directory? hiddenDir = await getHiddenDirectory();
      if (hiddenDir == null) return;
      String fileName = widget.imageUrl.split('/').last;
      String filePath = '${hiddenDir.path}/$fileName';

      // Check if the file already exists
      if (await File(filePath).exists()) {
        setState(() {
          downloadedImage = File(filePath);
          setStatus(status: true, value: 'Image already downloaded');
          updateLoading(false);
        });
      } else {
        // Download the image
        Dio dio = Dio();
        await dio.download(widget.imageUrl, filePath);

        // Save the file to display
        setState(() {
          downloadedImage = File(filePath);
          setStatus(status: true, value: 'Image downloaded successfully');
          updateLoading(false);
        });
      }
    } catch (e) {
      setState(() {
        setStatus(status: false, value: 'Error downloading image: $e');
        updateLoading(false);
      });
    }
  }

  void setStatus({
    required bool status,
    required String value,
  }) {
    print("$status  $value");
    if (widget.downloadStatus != null) {
      widget.downloadStatus!(status, value);
    }
  }

  void updateLoading(bool status) {
    if (widget.imageDownloading != null) {
      widget.imageDownloading!(status);
    }
  }
}

class CommonFileWidget extends StatefulWidget {
  final String fileUrl;
  final String fileType; // For specifying the file type
  final ValueChanged<bool>? fileDownloading;
  final void Function(bool status, String value)? downloadStatus;

  const CommonFileWidget({
    super.key,
    required this.fileUrl,
    required this.fileType,
    this.fileDownloading,
    this.downloadStatus,
  });

  @override
  State<CommonFileWidget> createState() => CommonFileWidgetState();
}

class CommonFileWidgetState extends State<CommonFileWidget> {
  File? downloadedFile;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      checkForDownloadedFile();
    });
  }

  @override
  Widget build(BuildContext context) {
    if (downloadedFile != null) {
      return ElevatedButton(
        onPressed: () {
          OpenFile.open(downloadedFile!.path);
        },
        child: Text('Open ${widget.fileType} file'),
      );
    } else {
      return const Center(child: Text('File not downloaded yet'));
    }
  }

  Future<Directory?> getHiddenDirectory() async {
    Directory? hiddenDir;
    if (Platform.isAndroid) {
      hiddenDir = await getExternalStorageDirectory();
      String hiddenPath = '${hiddenDir?.path ?? ""}/.hiddenFiles';
      hiddenDir = Directory(hiddenPath);
    } else if (Platform.isIOS) {
      hiddenDir = await getApplicationDocumentsDirectory();
    }

    if (hiddenDir != null && !(await hiddenDir.exists())) {
      await hiddenDir.create(recursive: true);
    }
    return hiddenDir;
  }

  Future<void> checkForDownloadedFile({bool downloading = false}) async {
    Directory? hiddenDir = await getHiddenDirectory();
    if (hiddenDir != null) {
      String fileName = widget.fileUrl.split('/').last;
      String filePath = '${hiddenDir.path}/$fileName';
      if (await File(filePath).exists()) {
        setState(() {
          downloadedFile = File(filePath);
          setStatus(status: true, value: 'File already downloaded');
        });
      } else {
        if (downloading) {
          downloadFileToHiddenFolder();
        }
      }
    }
  }

  Future<void> downloadFileToHiddenFolder() async {
    updateLoading(true);
    try {
      if (Platform.isAndroid) {
        PermissionStatus permission = await Permission.storage.request();
        if (!permission.isGranted) {
          setStatus(status: false, value: 'Storage permission not granted');
          updateLoading(false);
          return;
        }
      }
      Directory? hiddenDir = await getHiddenDirectory();
      if (hiddenDir == null) return;
      String fileName = widget.fileUrl.split('/').last;
      String filePath = '${hiddenDir.path}/$fileName';

      if (await File(filePath).exists()) {
        setState(() {
          downloadedFile = File(filePath);
          setStatus(status: true, value: 'File already downloaded');
          updateLoading(false);
        });
      } else {
        Dio dio = Dio();
        await dio.download(widget.fileUrl, filePath);

        setState(() {
          downloadedFile = File(filePath);
          setStatus(status: true, value: 'File downloaded successfully');
          updateLoading(false);
        });
      }
    } catch (e) {
      setStatus(status: false, value: 'Error downloading file: $e');
      updateLoading(false);
    }
  }

  void setStatus({
    required bool status,
    required String value,
  }) {
    if (widget.downloadStatus != null) {
      widget.downloadStatus!(status, value);
    }
  }

  void updateLoading(bool status) {
    if (widget.fileDownloading != null) {
      widget.fileDownloading!(status);
    }
  }
}

class CommonVideoWidget extends StatefulWidget {
  final String videoUrl;
  final ValueChanged<bool>? videoDownloading;
  final void Function(bool status, String value)? downloadStatus;

  const CommonVideoWidget({
    super.key,
    required this.videoUrl,
    this.videoDownloading,
    this.downloadStatus,
  });

  @override
  State<CommonVideoWidget> createState() => CommonVideoWidgetState();
}

class CommonVideoWidgetState extends State<CommonVideoWidget> {
  File? downloadedVideo;
  VideoPlayerController? _controller;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      checkForDownloadedVideo();
    });
  }

  @override
  Widget build(BuildContext context) {
    if (downloadedVideo != null && _controller != null) {
      return AspectRatio(
        aspectRatio: _controller!.value.aspectRatio,
        child: VideoPlayer(_controller!),
      );
    } else {
      return const Center(child: Text('Video not downloaded or loaded'));
    }
  }

  Future<Directory?> getHiddenDirectory() async {
    Directory? hiddenDir;
    if (Platform.isAndroid) {
      hiddenDir = await getExternalStorageDirectory();
      String hiddenPath = '${hiddenDir?.path ?? ""}/.hiddenVideos';
      hiddenDir = Directory(hiddenPath);
    } else if (Platform.isIOS) {
      hiddenDir = await getApplicationDocumentsDirectory();
    }

    if (hiddenDir != null && !(await hiddenDir.exists())) {
      await hiddenDir.create(recursive: true);
    }
    return hiddenDir;
  }

  Future<void> checkForDownloadedVideo({bool downloading = false}) async {
    Directory? hiddenDir = await getHiddenDirectory();
    if (hiddenDir != null) {
      String fileName = widget.videoUrl.split('/').last;
      String filePath = '${hiddenDir.path}/$fileName';
      if (await File(filePath).exists()) {
        setState(() {
          downloadedVideo = File(filePath);
          _controller = VideoPlayerController.file(downloadedVideo!)
            ..initialize().then((_) {
              setState(() {}); // Ensure the video loads
              _controller!.play(); // Automatically play video
            });
          setStatus(status: true, value: 'Video already downloaded');
        });
      } else {
        if (downloading) {
          downloadVideoToHiddenFolder();
        }
      }
    }
  }

  Future<void> downloadVideoToHiddenFolder() async {
    updateLoading(true);
    try {
      if (Platform.isAndroid) {
        PermissionStatus permission = await Permission.storage.request();
        if (!permission.isGranted) {
          setState(() {
            setStatus(status: false, value: 'Storage permission not granted');
            updateLoading(false);
          });
          return;
        }
      }
      Directory? hiddenDir = await getHiddenDirectory();
      if (hiddenDir == null) return;
      String fileName = widget.videoUrl.split('/').last;
      String filePath = '${hiddenDir.path}/$fileName';

      // Check if the file already exists
      if (await File(filePath).exists()) {
        setState(() {
          downloadedVideo = File(filePath);
          _controller = VideoPlayerController.file(downloadedVideo!)
            ..initialize().then((_) {
              setState(() {}); // Ensure the video loads
              _controller!.play();
            });
          setStatus(status: true, value: 'Video already downloaded');
          updateLoading(false);
        });
      } else {
        // Download the video
        Dio dio = Dio();
        await dio.download(widget.videoUrl, filePath);

        setState(() {
          downloadedVideo = File(filePath);
          _controller = VideoPlayerController.file(downloadedVideo!)
            ..initialize().then((_) {
              setState(() {}); // Ensure the video loads
              _controller!.play();
            });
          setStatus(status: true, value: 'Video downloaded successfully');
          updateLoading(false);
        });
      }
    } catch (e) {
      setState(() {
        setStatus(status: false, value: 'Error downloading video: $e');
        updateLoading(false);
      });
    }
  }

  void setStatus({
    required bool status,
    required String value,
  }) {
    print("$status  $value");
    if (widget.downloadStatus != null) {
      widget.downloadStatus!(status, value);
    }
  }

  void updateLoading(bool status) {
    if (widget.videoDownloading != null) {
      widget.videoDownloading!(status);
    }
  }

  @override
  void dispose() {
    _controller?.dispose();
    super.dispose();
  }
}
